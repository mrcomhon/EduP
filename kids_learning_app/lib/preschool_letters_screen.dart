import 'package:flutter/material.dart';

class PreschoolLettersScreen extends StatefulWidget {
  @override
  _PreschoolLettersScreenState createState() => _PreschoolLettersScreenState();
}

class _PreschoolLettersScreenState extends State<PreschoolLettersScreen> {
  int currentIndex = 0;
  String? feedback;
  int correctCount = 0;

  void checkAnswer(String selected) {
    final correct = letterQuestions[currentIndex].correctWord;
    setState(() {
      feedback = (selected == correct) ? '–í–µ—Ä–Ω–æ! üéâ' : '–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë üôÉ';
      if (selected == correct) correctCount++;
    });

    Future.delayed(Duration(seconds: 1), () {
      setState(() {
        if (currentIndex < letterQuestions.length - 1) {
          currentIndex++;
          feedback = null;
        } else {
          showDialog(
            context: context,
            builder:
                (_) => AlertDialog(
                  title: Text('–ú–æ–ª–æ–¥–µ—Ü!'),
                  content: Text(
                    '–¢—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ $correctCount –∏–∑ ${letterQuestions.length}',
                  ),
                  actions: [
                    TextButton(
                      onPressed: () {
                        Navigator.of(context).pop();
                        setState(() {
                          currentIndex = 0;
                          correctCount = 0;
                          feedback = null;
                        });
                      },
                      child: Text('–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ'),
                    ),
                  ],
                ),
          );
        }
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    final q = letterQuestions[currentIndex];

    return Scaffold(
      appBar: AppBar(title: Text('üî§ –ò–∑—É—á–∞–µ–º –±—É–∫–≤—ã')),
body: LayoutBuilder(
        builder: (context, constraints) {
          return SingleChildScrollView(
            padding: const EdgeInsets.all(20),
            child: ConstrainedBox(
              constraints: BoxConstraints(minHeight: constraints.maxHeight),
              child: IntrinsicHeight(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.stretch,
                  children: [
                    Text(
                      '–ó–∞–¥–∞–Ω–∏–µ ${currentIndex + 1} –∏–∑ ${letterQuestions.length}',
                      style: TextStyle(fontSize: 20, color: Colors.grey[700]),
                      textAlign: TextAlign.center,
                    ),
                    SizedBox(height: 8),
                    Text(
                      '–í—ã–±–µ—Ä–∏ —Å–ª–æ–≤–æ –Ω–∞ –±—É–∫–≤—É "${q.letter}"',
                      style: TextStyle(fontSize: 24),
                      textAlign: TextAlign.center,
                    ),
                    SizedBox(height: 20),
                    Center(
                      child: Card(
                        elevation: 5,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(16),
                        ),
                        color: Colors.purple.shade100,
                        child: Padding(
                          padding: const EdgeInsets.all(24.0),
                          child: Text(
                            q.letter,
                            style: TextStyle(
                              fontSize: 80,
                              fontWeight: FontWeight.bold,
                              color: Colors.deepPurple,
                            ),
                          ),
                        ),
                      ),
                    ),
                    SizedBox(height: 20),
                    ...q.options.map(
                      (word) => Padding(
                        padding: const EdgeInsets.symmetric(vertical: 6.0),
                        child: Center(
                          child: ConstrainedBox(
                            constraints: BoxConstraints(maxWidth: 400),
                            child: ElevatedButton(
                              onPressed: () => checkAnswer(word),
                              style: ElevatedButton.styleFrom(
                                padding: EdgeInsets.symmetric(vertical: 14),
                                minimumSize: Size(double.infinity, 50),
                              ),
                              child: Text(
                                word,
                                style: TextStyle(fontSize: 20),
                                textAlign: TextAlign.center,
                                overflow: TextOverflow.ellipsis,
                                maxLines: 1,
                              ),
                            ),
                          ),
                        ),
                      ),
                    ),
                    if (feedback != null) ...[
                      SizedBox(height: 20),
                      Text(
                        feedback!,
                        style: TextStyle(
                          fontSize: 22,
                          color:
                              feedback == '–í–µ—Ä–Ω–æ! üéâ'
                                  ? Colors.green
                                  : Colors.red,
                        ),
                        textAlign: TextAlign.center,
                      ),
                    ],
                  ],
                ),
              ),
            ),
          );
        },
      ),
    );
  }
}

class LetterQuestion {
  final String letter;
  final List<String> options;
  final String correctWord;

  LetterQuestion({
    required this.letter,
    required this.options,
    required this.correctWord,
  });
}

final List<LetterQuestion> letterQuestions = [
  LetterQuestion(
    letter: '–ê',
    options: ['–ê—Ä–±—É–∑', '–°–ª–æ–Ω', '–†—ã–±–∞'],
    correctWord: '–ê—Ä–±—É–∑',
  ),
  LetterQuestion(
    letter: '–ë',
    options: ['–ú—è—á', '–ë–∞–±–æ—á–∫–∞', '–î–µ—Ä–µ–≤–æ'],
    correctWord: '–ë–∞–±–æ—á–∫–∞',
  ),
  LetterQuestion(
    letter: '–í',
    options: ['–í–æ–ª–∫', '–ö–æ—Ç', '–¢–æ—Ä—Ç'],
    correctWord: '–í–æ–ª–∫',
  ),
  LetterQuestion(
    letter: '–ì',
    options: ['–ì—Ä–∏–±', '–ü—Ç–∏—Ü–∞', '–î–æ–º'],
    correctWord: '–ì—Ä–∏–±',
  ),
  LetterQuestion(
    letter: '–î',
    options: ['–Ø–±–ª–æ–∫–æ', '–õ–µ–≤', '–î–æ–º'],
    correctWord: '–î–æ–º',
  ),
  LetterQuestion(
    letter: '–ï',
    options: ['–Å–∂–∏–∫', '–ï–ª—å', '–ó–æ–Ω—Ç'],
    correctWord: '–ï–ª—å',
  ),
  LetterQuestion(
    letter: '–ñ',
    options: ['–ñ—É–∫', '–ú–∞—à–∏–Ω–∞', '–ö–∞—Ä–∞–Ω–¥–∞—à'],
    correctWord: '–ñ—É–∫',
  ),
  LetterQuestion(
    letter: '–ó',
    options: ['–ó–∞—è—Ü', '–ù–æ—Å–æ—Ä–æ–≥', '–ö—É–∫—É—Ä—É–∑–∞'],
    correctWord: '–ó–∞—è—Ü',
  ),
  LetterQuestion(
    letter: '–ò',
    options: ['–ò–≥–ª–∞', '–°—Ç—É–ª', '–ö–æ—Ç'],
    correctWord: '–ò–≥–ª–∞',
  ),
  LetterQuestion(
    letter: '–ô',
    options: ['–ô–æ–≥—É—Ä—Ç', '–¢–æ—Ä—Ç', '–†—É—á–∫–∞'],
    correctWord: '–ô–æ–≥—É—Ä—Ç',
  ),
  LetterQuestion(
    letter: '–ö',
    options: ['–ö–æ—à–∫–∞', '–ê–ø–µ–ª—å—Å–∏–Ω', '–ú–æ–ª–æ–∫–æ'],
    correctWord: '–ö–æ—à–∫–∞',
  ),
  LetterQuestion(
    letter: '–õ',
    options: ['–õ–∏–º–æ–Ω', '–°–Ω–µ–≥', '–ì—Ä—É—à–∞'],
    correctWord: '–õ–∏–º–æ–Ω',
  ),
  LetterQuestion(
    letter: '–ú',
    options: ['–ú–∞—à–∏–Ω–∞', '–û–±–ª–∞–∫–æ', '–°–ª–æ–Ω'],
    correctWord: '–ú–∞—à–∏–Ω–∞',
  ),
  LetterQuestion(
    letter: '–ù',
    options: ['–ù–æ—Å', '–ß–∞–π–Ω–∏–∫', '–ö–Ω–∏–≥–∞'],
    correctWord: '–ù–æ—Å',
  ),
  LetterQuestion(
    letter: '–û',
    options: ['–û–∫–Ω–æ', '–ú–µ–¥–≤–µ–¥—å', '–¢–µ—Ç—Ä–∞–¥—å'],
    correctWord: '–û–∫–Ω–æ',
  ),
  LetterQuestion(
    letter: '–ü',
    options: ['–ü–∞–Ω–¥–∞', '–ú–æ–ª–æ–∫–æ', '–°–æ–±–∞–∫–∞'],
    correctWord: '–ü–∞–Ω–¥–∞',
  ),
  LetterQuestion(
    letter: '–†',
    options: ['–†–∞–∫–µ—Ç–∞', '–°—ã—Ä', '–ë–∞–±–æ—á–∫–∞'],
    correctWord: '–†–∞–∫–µ—Ç–∞',
  ),

   LetterQuestion(
    letter: '–°',
    options: ['–°–æ–±–∞–∫–∞', '–Ø–±–ª–æ–∫–æ', '–î–µ—Ä–µ–≤–æ'],
    correctWord: '–°–æ–±–∞–∫–∞',
  ),
  LetterQuestion(
    letter: '–¢',
    options: ['–¢–æ—Ä—Ç', '–õ–∏—Å–∞', '–†–µ–∫–∞'],
    correctWord: '–¢–æ—Ä—Ç',
  ),
  LetterQuestion(
    letter: '–£',
    options: ['–£—Ç–∫–∞', '–ö–æ—à–∫–∞', '–ú—è—á'],
    correctWord: '–£—Ç–∫–∞',
  ),
  LetterQuestion(
    letter: '–§',
    options: ['–§–ª–∞–≥', '–ú–∞—à–∏–Ω–∞', '–°—Ç–æ–ª'],
    correctWord: '–§–ª–∞–≥',
  ),
  LetterQuestion(
    letter: '–•',
    options: ['–•–ª–µ–±', '–ú–æ–ª–æ–∫–æ', '–í–∏–ª–∫–∞'],
    correctWord: '–•–ª–µ–±',
  ),
  LetterQuestion(
    letter: '–¶',
    options: ['–¶–∞–ø–ª—è', '–†—É—á–∫–∞', '–ì—Ä—É—à–∞'],
    correctWord: '–¶–∞–ø–ª—è',
  ),
  LetterQuestion(
    letter: '–ß',
    options: ['–ß–∞–π–Ω–∏–∫', '–°–Ω–µ–≥', '–ú–µ–¥–≤–µ–¥—å'],
    correctWord: '–ß–∞–π–Ω–∏–∫',
  ),
  LetterQuestion(
    letter: '–®',
    options: ['–®–∞—Ä–∏–∫', '–ü–µ—Ç—É—Ö', '–û–±–ª–∞–∫–æ'],
    correctWord: '–®–∞—Ä–∏–∫',
  ),
  LetterQuestion(
    letter: '–©',
    options: ['–©—É–∫–∞', '–¢–µ—Ç—Ä–∞–¥—å', '–ü–µ—á–µ–Ω—å–µ'],
    correctWord: '–©—É–∫–∞',
  ),
  LetterQuestion(
    letter: '–™',
    options: ['–ü–æ–¥—ä–µ–∑–¥', '–Å–ª–∫–∞', '–ê—Ä–±—É–∑'],
    correctWord: '–ü–æ–¥—ä–µ–∑–¥',
  ),
    LetterQuestion(
    letter: '–´',
    options: ['–¢–∞—Ä–∞–∫–∞–Ω', '–ù–æ—Å–æ–∫', '–õ—ã–∂–∏'],
    correctWord: '–õ—ã–∂–∏',
  ),
  LetterQuestion(
    letter: '–¨',
    options: ['–õ–æ—à–∞–¥—å', '–ö–Ω–∏–≥–∞', '–î–≤–µ—Ä—å'],
    correctWord: '–õ–æ—à–∞–¥—å',
  ),
  LetterQuestion(
    letter: '–≠',
    options: ['–≠–∫—Ä–∞–Ω', '–ü–µ—á–∫–∞', '–¢–æ—Ä—Ç'],
    correctWord: '–≠–∫—Ä–∞–Ω',
  ),
  LetterQuestion(
    letter: '–Æ',
    options: ['–Æ–ª–∞', '–ß–∞—à–∫–∞', '–ö–æ—Ç—ë–Ω–æ–∫'],
    correctWord: '–Æ–ª–∞',
  ),
  LetterQuestion(
    letter: '–Ø',
    options: ['–Ø–±–ª–æ–∫–æ', '–†—ã–±–∞', '–ú–∞—à–∏–Ω–∞'],
    correctWord: '–Ø–±–ª–æ–∫–æ',
  ),
];
