import 'package:flutter/material.dart';
import 'package:audioplayers/audioplayers.dart';

class BuildWordFromSoundsScreen extends StatefulWidget {
  @override
  _BuildWordFromSoundsScreenState createState() => _BuildWordFromSoundsScreenState();
}

class _BuildWordFromSoundsScreenState extends State<BuildWordFromSoundsScreen> {
  final AudioPlayer _audioPlayer = AudioPlayer();
  int currentIndex = 0;
  String? feedback;

  final List<BuildWordQuestion> questions = [
    BuildWordQuestion(
      soundAssets: ['audio/k.mp3', 'audio/o.mp3', 'audio/t.mp3'],
      correctWord: '–ö–æ—Ç',
      options: ['–ö–æ—Ç', '–ö–∏—Ç', '–°–æ–∫'],
    ),
    BuildWordQuestion(
      soundAssets: ['audio/m.mp3', 'audio/a.mp3', 'audio/m.mp3', 'audio/a.mp3'],
      correctWord: '–ú–∞–º–∞',
      options: ['–ú–∞–º–∞', '–ú—ã–ª–æ', '–õ–∞–º–∞'],
    ),
    // –î–æ–±–∞–≤—å –±–æ–ª—å—à–µ –∑–∞–¥–∞–Ω–∏–π –ø–æ –∂–µ–ª–∞–Ω–∏—é
  ];

  void playSoundsSequentially(List<String> assets) async {
    for (var asset in assets) {
      await _audioPlayer.play(AssetSource(asset));
      await Future.delayed(Duration(seconds: 1));
    }
  }

  void checkAnswer(String selected) {
    setState(() {
      feedback = selected == questions[currentIndex].correctWord
          ? '–í–µ—Ä–Ω–æ! üéâ'
          : '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ üòî';
    });
  }

  void nextQuestion() {
    if (currentIndex < questions.length - 1) {
      setState(() {
        currentIndex++;
        feedback = null;
      });
    } else {
      showDialog(
        context: context,
        builder: (_) => AlertDialog(
          title: Text('–û—Ç–ª–∏—á–Ω–æ!'),
          content: Text('–¢—ã –ø—Ä–æ—à—ë–ª –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è!'),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: Text('–û–∫'),
            ),
          ],
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    final q = questions[currentIndex];

    return Scaffold(
      appBar: AppBar(title: Text('üîä –°–æ–±–µ—Ä–∏ —Å–ª–æ–≤–æ –∏–∑ –∑–≤—É–∫–æ–≤')),
      body: Padding(
        padding: const EdgeInsets.all(20),
        child: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              Text(
                '–ó–∞–¥–∞–Ω–∏–µ ${currentIndex + 1} –∏–∑ ${questions.length}',
                style: TextStyle(fontSize: 20, color: Colors.grey[700]),
              ),
              SizedBox(height: 20),
              Text(
                '–ü—Ä–æ—Å–ª—É—à–∞–π –∑–≤—É–∫–∏ –∏ —Å–æ–±–µ—Ä–∏ —Å–ª–æ–≤–æ',
                style: TextStyle(fontSize: 24),
                textAlign: TextAlign.center,
              ),
              SizedBox(height: 20),
              ElevatedButton.icon(
                onPressed: () => playSoundsSequentially(q.soundAssets),
                icon: Icon(Icons.volume_up),
                label: Text('–°–ª—É—à–∞—Ç—å –∑–≤—É–∫–∏'),
                style: ElevatedButton.styleFrom(
                  padding: EdgeInsets.symmetric(vertical: 12, horizontal: 24),
                ),
              ),
              SizedBox(height: 30),
              ...q.options.map(
                (word) => Padding(
                  padding: const EdgeInsets.symmetric(vertical: 8.0),
                  child: ElevatedButton(
                    onPressed: () => checkAnswer(word),
                    child: Text(word, style: TextStyle(fontSize: 20)),
                    style: ElevatedButton.styleFrom(
                      padding: EdgeInsets.symmetric(vertical: 16),
                      minimumSize: Size(double.infinity, 50),
                    ),
                  ),
                ),
              ),
              if (feedback != null) ...[
                SizedBox(height: 20),
                Text(
                  feedback!,
                  style: TextStyle(
                    fontSize: 22,
                    color: feedback == '–í–µ—Ä–Ω–æ! üéâ' ? Colors.green : Colors.red,
                  ),
                ),
                if (feedback == '–í–µ—Ä–Ω–æ! üéâ')
                  TextButton(onPressed: nextQuestion, child: Text('–î–∞–ª—å—à–µ')),
              ],
            ],
          ),
        ),
      ),
    );
  }
}

class BuildWordQuestion {
  final List<String> soundAssets;
  final String correctWord;
  final List<String> options;

  BuildWordQuestion({
    required this.soundAssets,
    required this.correctWord,
    required this.options,
  });
}
